Todayâ€™s programming is all about costs. Saving is a big issue when it comes to using computer resources, so programmers are doing their best to find ways of improving the performance When we talk about object creation we can find a better way to have new objects: cloning. To this idea one particular design pattern is related: rather than creation it uses cloning. If the cost of creating a new object is large and creation is resource intensive, we clone the object.

The Prototype design pattern is the one in question. It allows an object to create customized objects without knowing their class or any details of how to create them. Up to this point it sounds a lot like the Factory Method pattern, the difference being the fact that for the Factory the palette of prototypical objects never contains more than one object.

specifying the kind of objects to create using a prototypical instance
creating new objects by copying this prototype

The classes participating to the Prototype Pattern are:
>Client - creates a new object by asking a prototype to clone itself.
>Prototype - declares an interface for cloning itself.
>ConcretePrototype - implements the operation for cloning itself.

Use Prototype Pattern when a system should be independent of how its products are created, composed, and represented, and:

Classes to be instantiated are specified at run-time
Avoiding the creation of a factory hierarchy is needed
It is more convenient to copy an existing instance than to create a new one.


http://howtodoinjava.com/2013/01/04/prototype-design-pattern-in-java/
http://www.oodesign.com/prototype-pattern.html
https://sourcemaking.com/design_patterns/prototype