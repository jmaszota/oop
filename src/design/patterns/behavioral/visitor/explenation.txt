Collections are data types widely used in object oriented programming.
Often collections contain objects of different types and in those cases some operations have to be performed on all the collection elements without knowing the type.


A possible approach to apply a specific operation on objects of different types in a collection would be the use if blocks in conjunction with 'instanceof' for each element.
This approach is not a nice one, not flexible and not object oriented at all. At this point we should think to the Open Close principle and we should remember from there that
we can replace if blocks with an abstract class and each concrete class will implement its own operation.


Intent

Represents an operation to be performed on the elements of an object structure.
Visitor lets you define a new operation without changing the classes of the elements on which it operates.


The participants classes in this pattern are:
Visitor - This is an interface or an abstract class used to declare the visit operations for all the types of visitable classes.
    Usually the name of the operation is the same and the operations are differentiated by the method signature: The input object type decides which of the method is called.
ConcreteVisitor - For each type of visitor all the visit methods, declared in abstract visitor, must be implemented. Each Visitor will be responsible for different operations.
    When a new visitor is defined it has to be passed to the object structure.
Visitable - is an abstraction which declares the accept operation. This is the entry point which enables an object to be "visited" by the visitor object.
    Each object from a collection should implement this abstraction in order to be able to be visited.
ConcreteVisitable - Those classes implements the Visitable interface or class and defines the accept operation. The visitor object is passed to this object using the accept operation.
ObjectStructure - This is a class containing all the objects that can be visited. It offers a mechanism to iterate through all the elements.
    This structure is not necessarily a collection. In can be a complex structure, such as a composite object.


Applicability & Examples

The visitor pattern is used when:
Similar operations have to be performed on objects of different types grouped in a structure (a collection or a more complex structure).
There are many distinct and unrelated operations needed to be performed. Visitor pattern allows us to create a separate visitor concrete class for each type of operation and to separate this operation implementation from the objects structure.
The object structure is not likely to be changed but is very probable to have new operations which have to be added. Since the pattern separates the visitor (representing operations, algorithms, behaviors) from the object structure it's very easy to add new visitors as long as the structure remains unchanged.

http://www.oodesign.com/visitor-pattern.html
http://www.oodesign.com/visitor-pattern-customers-report-java-sourcecode.html
https://sourcemaking.com/design_patterns/visitor
